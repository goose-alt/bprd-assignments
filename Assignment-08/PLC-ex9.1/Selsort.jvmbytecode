  public static void SelectionSort(int[]);
    descriptor: ([I)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=4, args_size=1
         // Loop 1. 'int i = 0;'
         0: iconst_0            // Push int 0 to the top of the stack
         1: istore_1            // Store int to local variable 1 (i)
         2: iload_1             // Load int from local variable 1 (i)
         3: aload_0             // Load reference from local variable 0. Local variable 0 is the reference to the first arg, in this case arr.
         4: arraylength         // Push the length of the array to the top of the stack

         // Loop 1. 'i < arr.length;'
         5: if_icmpge     57    // Go to 57 if greater than or equal. AKA return if loop is done

         // Loop 1. body 'int least = i;'
         8: iload_1             // Load int from local variable 1 (i)
         9: istore_2            // Store int to local variable 2 (least). "int least = i;"

        // Loop 2. 'int j = i+1;'
        10: iload_1             // Load int from local variable 1 (i)
        11: iconst_1            // Push int 1 to the top of the stack
        12: iadd                // Add the 2 ints at the top of the stack (i+1)
        13: istore_3            // Store int to local variable 3 (j)
        14: iload_3             // Load int from local variable 3 (j)

        // Loop 2. 'j < arr.length;'
        15: aload_0             // Load reference from local variable 0 (arr)
        16: arraylength         // Push the length of the array to the stack
        17: if_icmpge     37    // Go to 37 if greate than or equal. AKA go to after loop if loop is done

        // Loop 2. body 'if ....'
        20: aload_0             // Load reference from local variable 0 (arr) 
        21: iload_3             // Load int from local variable 3 (j)
        22: iaload              // Load int from array at the index currently on the top of the stack (j)
        23: aload_0             // Load reference from local variable 0 (arr)
        24: iload_2             // Load int from local variable 2 (least)
        25: iaload              // Load int from array at the index currently on the top of the stack (least)
        26: if_icmpge     31    // Go to 31 if greater than or equal. AKA skip the if statement body if not true
        29: iload_3             // Load int from local variable 3 (j)
        30: istore_2            // Store int to local variable 2 (least)

        // Loop 2. 'j++'
        31: iinc          3, 1  // Increment local variable 3 (j) by 1 
        34: goto          14    // Go to instruction 14. AKA top of loop 2

        // Loop 1. body 'int tmp = ....'
        37: aload_0             // Load reference from local variable 0 (arr)
        38: iload_1             // Load int from local variable 1 (i)
        39: iaload              // Load int from array at the index currently on the top of the stack (i)
        40: istore_3            // Store int to local variable 3 (tmp). (Was j but has been reclaimed). AKA int tmp = arr[i];
        // 'arr[i] = arr[least]'
        41: aload_0             // Load reference from local variable 0 (arr) 
        42: iload_1             // Load int from local variable 1 (i)
        43: aload_0             // Load reference from local variable 0 (arr)
        44: iload_2             // Load int from local variable 2 (least)
        45: iaload              // Load int from array at the index currently on the top of the stack (least)
        46: iastore             // Store int to array at the index currently on the 2nd level of the stack (i). AKA arr[i] = arr[least];
        47: aload_0             // Load reference from local variable 0 (arr)
        48: iload_2             // Load int from local variable 2 (least)
        49: iload_3             // Load int form local variable 3 (tmp)
        50: iastore             // Store int to array at the index currently on the 2nd level of the stack (least). AKA arr[least] = tmp;

        // Loop 1. 'i++'
        51: iinc          1, 1  // Increment local variable 1 (i) by 1. AKA i++
        54: goto          2     // Go to instruction 2. AKA top of loop 1
        57: return              // End the function 
